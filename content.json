{"pages":[{"title":"","text":"#","link":"/about/index.html"}],"posts":[{"title":"从零开始的Hexo博客搭建教程（五）：文章发布","text":"##","link":"/1eC0kV/"},{"title":"从零开始的Hexo博客搭建教程（四）：图床","text":"🖼写文章从选用一个好图床开始！ 一步一步按照教程挑选适合自己的图床服务吧！结合一些图床上传工具使得写文章事半功倍！ （虽然这一辑教程和Hexo没太大关系啦） 🎀多图预警！ 图床七牛对象存储大概是非常常用的对象存储了吧。 很多人推荐使用七牛云存储作为图床(高效、快速、有保障) 优点： 对于认证用户，七牛云存储提供免费的存储空间 10GB，每月下载流量 10GB，每月 PUT/DELETE 10 万次请求，每月 GET 100 万次请求。 缺点： HTTPS 域名产生的用量不计入免费额度 只有 30 天的测试域名，七牛融合 CDN 测试域名（clouddn.com/qiniucdn.com/qiniudn.com/qnssl.com/qbox.me 结尾），每个域名每日限总流量 10GB，每个测试域名自创建起 30 个自然日后系统会自动销毁，仅供测试使用。 到期后就只能自己绑定域名了，如果你的博客托管于 Github/Coding等服务上，并且手中没有闲置的已备案域名，也就意味着你要跳过七牛这一选项了。 1七牛对象存储 &lt;= 需要域名的备案号+公安备案号 &lt;= 需要购买主机 整个操作周期至少10天左右。 图床迁移很麻烦，无法批量下载。 STEP1: 注册账号并实名认证登录 七牛开发者平台，如果没有注册账号请先注册成为体验用户。 体验用户无法使用任何服务，请先前往 个人中心 - 个人信息 实名认证。 认证需提供 真实姓名、身份证号、身份证正反两面照片 等信息，3个工作日内人工审核完毕。 STEP2: 新建存储空间打开 对象存储 - 新建存储空间 即可创建新的Bucket。 在 内容管理 栏目中可以上传、下载、访问、修改资源等操作。 记下 Bucket名(即你创建的存储空间的名字)、外链默认域名。 打开 个人中心 - 密钥设置，记下 AccessKey/SecretKey，接下来会用到。 工具推荐PicGo: 跨平台图床神器【强烈推荐】基于 electron-vue 的开源跨平台图片上传工具，简化上传图片的繁杂操作，支持一键拖拽、剪贴板上传，功能强大，简单易用。 PicGo在上传图片之后自动会将图片链接复制到你的剪贴板里，可选5种复制的链接格式。 支持macOS、windows 64位（&gt;= v1.3.1），linux（&gt;= v1.6.0）。 Mac 上一款很不错的小工具应用 iPic 免费版本并不支持七牛图床，而PicGo v2.0.3 目前支持 SM.MS、腾讯云COS、微博图床、GitHub、七牛、Imgur、阿里云COS、又拍云等8种常用图床，其他图床服务可通过手写插件添加。 需要注意的是，想要使用PicGo 2.0的插件系统，需要先行安装Node.js环境，因为PicGo的插件安装依赖npm。 支持快捷键command+shift+p（macOS）或者control+shift+p（windows\\linux）用以支持快捷上传剪贴板里的图片（第一张）。 PicGo支持自定义快捷键，使用方法见配置手册。 下载地址github.com/Molunerfinn… 注意：mac 系统选择 dmg 下载，windwos 选择 .exe系统，如果不是下载安装包，想看源码的话，可以选择 git clone https://github.com/Molunerfinn/PicGo.git 克隆到本地 使用Github作为图床的配置https://www.jianshu.com/p/2756724a5dee VSCode的PicGo插件vs-picgo在PicGo-Core发布不久，就有人根据PicGo-Core的API编写了VSCode版的PicGo插件。使用起来也非常方便： 支持 截图上传、文件浏览器选择上传、输入文件路径上传。 配置项与PicGo的图床的配置项基本保持一致。在VSCode插件栏搜索PicGo即可下载安装与体验！ MPic: Windows下的七牛图床上传小工具支持 拖拽上传、截图上传、剪贴板图片上传。 下载地址MPic-图床神器 Mpic如何设置账号 打开Mpic，点击“设置账号” 将七牛对应信息填入面板，没有七牛账号请查看本文上方的七牛对象存储教程 空间名称： 七牛存储文件的空间名（就是你用于存储文件的文件夹名字，如下图我的）AccessKey： 点击七牛“个人面板”，“密钥管理”中即可看到AccessKeySecretKey： 点击七牛“个人面板”，“密钥管理”中即可看到 SecretKey域名： 存储空间对应的域名，如果存储空间绑定了自己的域名就填写自己的域名 设置链接格式和上传方式 因为使用图床的目的是为了方便Markdown写作，所以肯定要最终生成的连接是Markdown的图片链接格式。操作方式：在右下角的Mpic图标上，点击右键，然后按照图示勾选Markdown。 截图上传：右键单击右下角Mpic图标，把关闭截图自动上传前面的勾去掉，如果没有的勾的话，就保持原样不动。 复制上传：和截图上传操作类似，可以直接复制图片上传，我用的不多，因为这样可能会造成一些混乱。有需要的话，可以自行开启。","link":"/JjDMWM/"},{"title":"从零开始的Hexo博客搭建教程（六）：插件","text":"👓 推荐常用的 Hexo 插件 SEO优化hexo-baidu-url-submit 向百度主动提交链接hexo-autonofollow 外链自动nofollow1$ npm install hexo-autonofollow --save 注：hexo-nofollow 插件实在是让我头大，使用后会导致页面中多出许多莫名其妙的 &lt;meta name=generator content=&quot;Hexo 3.8.0&quot;&gt;，扰乱了博客页面排版。 我又一步步重新搭了一遍博客排查错误，最终发现 package.json 中删除 &quot;hexo-nofollow&quot;: &quot;^1.0.5&quot;, 即可完美解决问题。 工具hexo-generator-feed 订阅博客 RSS1$ npm install hexo-generator-feed --save In the front-matter of your post, you can optionally add a description, intro or excerpt setting to write a summary for the post. Otherwise the summary will default to the excerpt or the first 140 characters of the post. You can configure this plugin in _config.yml. 12345678910feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: \" \" order_by: -date icon: icon.png hexo-abbrlink 生成文章唯一ID1$ npm install hexo-autonofollow --save hexo-nanoid 用nanoid生成文章唯一ID1$ npm install nanoid --save","link":"/hAbX6u/"},{"title":"从零开始的Hexo博客搭建教程（七）：遇到的坑","text":"✨《从零开始的 Hexo 博客搭建教程(how-to-build-hexo-blog)》终于到了第七辑啦！ 本文用于 收集本人在使用 Hexo 的过程中出现的 各种坑及解决方法。 如果你有更好的解决方法或遇过的坑，欢迎在评论区分享喔 ο(=•ω ＜=)ρ⌒☆ Template render error问题描述 在使用 hexo g 生成文章的时候，控制台报错如下: 123FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlTemplate render error: (unknown path) [Line 12, Column 17]expected variable end 出现原因 当文章中有 }} 或 EJS 模板语法，且未被代码块包含时，解析会出现问题。 解决方法 12{% raw %}放到代码块中就OK啦 Sitemap.xml 出现错误问题描述 解决方法 请勿使文章名或 md 文件名包含 &amp; 符号 导致 hexo 文章链接中也包含该符号。 去除后再重新生成即可恢复正常。","link":"/A-fgp4/"},{"title":"从零开始的Hexo博客搭建教程（一）：开始","text":"🎂 开始你的 Hexo 之旅 Why Hexo?基础搭配：Git + Github Pages + Hexo 优点 免费 - GitHub 快速 - Node 运行环境、前端个人站点首选 简洁 - MarkDown 轻量 - 全部静态文件 支持导入 WordPress 等博客 不足 更换电脑不变 - 需重新安装环境 静态博客 - 后期不便于维护 多媒体管理较难 Get Started安装安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序： Node.js Git 如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 1$ npm install -g hexo-cli 安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。 123$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install 配置您可以在 _config.yml 中修改大部分的配置。 查看效果您可以通过 hexo server 查看效果 部署创建 github/coding 项目安装 hexo-deployer-git 插件1$ npm install hexo-deployer-git --save hexo 部署命令1$ hexo deploy 在开始之前，您必须先在 _config.yml 中修改参数，一个正确的部署配置中至少要有 type 参数，例如： 12deploy: type: git 您可同时使用多个 deployer，Hexo 会依照顺序执行每个 deployer。 12345deploy:- type: git repo:- type: heroku repo: 域名Coding Page 绑定域名绑定新域名 强制 HTTPS 访问 SSL/TLS 安全证书 域名解析绑定前请在域名 DNS 设置中添加一条 CNAME 记录指向 gylidian.coding.me","link":"/h94Rf-/"},{"title":"从零开始的Hexo博客搭建教程（二）：主题","text":"🧁 为你的 Hexo 博客添加美观的主题，包括主题配置、分享、打赏、评论插件等。 主题安装主题1git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus Next, replace the theme setting in your blog’s _config.yml file: 1theme: icarus 配置主题评论插件对比多款评论插件 后最终选用 gittalk，UI 非常美观 使用 GitHub 登录 支持多语言 [en, zh-CN, zh-TW, es-ES, fr, ru] 支持个人或组织 无干扰模式（设置 distractionFreeMode 为 true 开启） 快捷键提交评论 （cmd|ctrl + enter） npm 安装 1$ npm i --save gitalk 需要 GitHub Aplication如果没有 点击这里申请，Authorization callback URL 填写当前使用插件页面的域名。 修改 _config.yml123456789101112comment: type: gitalk owner: xxxxxxxx # (required) GitHub user name repo: xxxxxxxx # (required) GitHub repository name client_id: xxxxxxxx # (required) OAuth application client id client_secret: xxxxxxxx # (required) OAuth application client secret admin: xxxxxxxx # (required) GitHub repo owner and collaborators who can initialize github issues # Can either be a string or an array. # admin: # - xxxxxx1 # - xxxxxx2 其他配置项请 访问github 仓库 查看 坑未找到相关的 Issues 进行评论 请联系 @gylidian 初始化创建 https://blog.csdn.net/dataiyangu/article/details/84961965","link":"/0IxRfH/"},{"title":"如何优雅地为博客添加打赏二维码功能","text":"1.打开“微信”。 2.打开“我”，然后点击“钱包”。 3.点击“收付码”。 4.点击“赞赏码”。 5.点击“开通赞赏码”。 6.添加“赞赏引导语”，还可以根据需要修改“赞赏金额”，然后点击“生成赞赏码”。 7.赞赏码生成完毕。","link":"/0gjs9V/"},{"title":"2018年我的代码行数年度总结","text":"2018 年 年度总结 代码行数统计工具 npm install -g sloc 统计内容 Create stats of the source code: physical lines lines of code (source) lines with comments lines with single-line comments lines with block comments lines mixed up with source and comments empty lines within block comments empty lines lines with TODO’s 使用方法 sloc --details --format json --exclude node_modules ./ sloc --exclude node_modules ./ 统计结果D:\\部署在线上的网站\\Hackathonhtml css javascript 杭电黑客松作品的前端部分，废弃许久未动。 当时熬了踏马 18 个小时写了个 webapp，虽然很简陋 但是动画很骚，音乐也能正确获取、记录、播放 就是了 123456789101112131415---------- Result ------------ Physical : 23867 Source : 19319 Comment : 3054 Single-line comment : 675 Block comment : 2379 Mixed : 122 Empty block comment : 2 Empty : 1618 To Do : 0Number of files read : 19---------------------------- D:\\部署在线上的网站\\Noveltyhtml css javascript 17 年（好像是年底）和学长参赛写过的一款物联网家庭控制面板，18 年一直修缮中。 主要是 UI 一直在精心打磨，也重构过两次 js 代码（后来看了学长给的 es6 书就用上了很多骚操作） 这也是我第一次使用 MDUI 这个框架 123456789101112131415---------- Result ------------ Physical : 49094 Source : 37906 Comment : 6605 Single-line comment : 1356 Block comment : 5250 Mixed : 203 Empty block comment : 6 Empty : 4792 To Do : 1Number of files read : 37---------------------------- D:\\部署在线上的网站\\NUIST 大赛官网html scss javascript svg 参加校 UI 竞赛的参赛作品，其实是 17 年(๑•̀ㅂ•́)و✧ 帮一个学姐(好朋友)写过的 web 课设，但是后来熬夜 10 天加了许多页面和装逼特效。 123456789101112131415---------- Result ------------ Physical : 42310 Source : 32977 Comment : 3424 Single-line comment : 1553 Block comment : 1871 Mixed : 269 Empty block comment : 6 Empty : 6184 To Do : 2Number of files read : 154---------------------------- D:\\部署在线上的网站\\Ruffhtml css javascript 去交大黑客松写的作品 大概是菜鸡第一次尝试全栈吧（前端、后端、硬件 其实那时候 nodejs 还不怎么会，就在这次写后端和写硬件的过程中，踩了不少坑就会用 Express 写 API 了 然后 ruff 这个阉割版的 node 引擎一般般吧，当时用起来觉得巨他妈爽，后来就抛弃了 ruff 123456789101112131415---------- Result ------------ Physical : 51890 Source : 40354 Comment : 6760 Single-line comment : 1390 Block comment : 5371 Mixed : 204 Empty block comment : 3 Empty : 4983 To Do : 2Number of files read : 71---------------------------- D:\\部署在线上的网站\\简历html css javascript 暑假找人 py 交易去小公司实习用的装逼页面 123456789101112131415---------- Result ------------ Physical : 2855 Source : 2232 Comment : 342 Single-line comment : 69 Block comment : 273 Mixed : 21 Empty block comment : 5 Empty : 307 To Do : 12Number of files read : 16---------------------------- D:\\NodeJs\\nuistbotnode 最近一个月写的 cqhttp 机器人，一直在熬夜修缮 之前刚用 seesion 做出了 表单（Progressive Forms）功能 也写了 只能发一张图片的说说 的 空间机器人（只能发说说算什么机器人啊喂 1234567891011121314151617181920212223242526272829303132333435PS D:\\NodeJs\\nuistbot&gt; sloc src/---------- Result ------------ Physical : 2384 Source : 1481 Comment : 794 Single-line comment : 162 Block comment : 632 Mixed : 35 Empty block comment : 5 Empty : 149 To Do : 1Number of files read : 39----------------------------PS D:\\NodeJs\\nuistbot&gt; sloc bin/---------- Result ------------ Physical : 154 Source : 115 Comment : 18 Single-line comment : 18 Block comment : 0 Mixed : 9 Empty block comment : 0 Empty : 30 To Do : 0Number of files read : 4---------------------------- D:\\NodeJs\\star-codepen-managementnode html css javascript vue 因为天天刷 codepen，collection 已经多到爆了，我的 star 数量起码 6000 了，迫不得已写了个浏览器拓展，有待开源（其实我是想写 electron 的，但是菜得很，electron 还没学懂） 1234567891011121314151617PS D:\\NodeJs\\star-codepen-management&gt; sloc src/---------- Result ------------ Physical : 9327 Source : 7783 Comment : 508 Single-line comment : 208 Block comment : 300 Mixed : 74 Empty block comment : 0 Empty : 1110 To Do : 4Number of files read : 111---------------------------- D:\\NodeJs\\tieba-crawlernode json 爬贴吧小说用的爬虫 爬了大概 400 多个 支持选取某个贴吧、收藏夹、单个帖子 123456789101112131415---------- Result ------------ Physical : 717 Source : 624 Comment : 40 Single-line comment : 40 Block comment : 0 Mixed : 21 Empty block comment : 0 Empty : 74 To Do : 2Number of files read : 9---------------------------- D:\\NodeJs\\年度总结html css javascript 最近两天熬夜肝的小作品，第一次没有用 cli、没有查资料 完整地从头到尾配置了一堆构建工具 主要就是 总结一下 2018 年干了什么事儿吧 越写越多，点子太多了，写不完了（比如我统计了一下 switch 各个游戏的游玩时长…认识了哪些朋友…聊天记录多少 MB…之类的无聊的（大概无聊吧？）数据吧） 比如 这篇博文的代码行数，我其实是又生成了一遍 json，然后引用在页面里的 123456789101112131415---------- Result ------------ Physical : 867 Source : 713 Comment : 88 Single-line comment : 75 Block comment : 13 Mixed : 10 Empty block comment : 0 Empty : 76 To Do : 0Number of files read : 19---------------------------- D:\\NodeJs\\RSSHub\\routes\\universities\\nuistnode 12 月写的 RSSHub 的南信大 rss，目前自己在用，很爽 目前可以获取南信大 8 个站的通知信息，涵盖研究生、计软院、教务处啊 blablablab… 然后我就没有更新了… 1234567891011121314151617PS D:\\NodeJs\\RSSHub\\routes\\universities\\nuist&gt; sloc ./---------- Result ------------ Physical : 524 Source : 465 Comment : 8 Single-line comment : 8 Block comment : 0 Mixed : 8 Empty block comment : 0 Empty : 59 To Do : 0Number of files read : 8---------------------------- C:\\Users\\gylid\\Desktop\\ATMjava fxml 第二个 java 课设，共含 11 个 Task（用到什么数据库、序列反序列化、Socket） 感谢小越越教我 socket 相比第一个课设，这次用 JavaFX 明显熟练多了 用上了更加扁平的 UI 设计（其实就是在各种颜色、位置、大小上纠结了很多细节） 然而查课设的老师并不看 UI（但是最后我还是软磨硬泡给他秀了一波界面，给我打了 95 分） 1234567891011121314151617C:\\Users\\gylid\\Desktop\\ATM&gt; sloc ./---------- Result ------------ Physical : 15936 Source : 12845 Comment : 1707 Single-line comment : 276 Block comment : 1431 Mixed : 82 Empty block comment : 0 Empty : 1466 To Do : 18Number of files read : 210---------------------------- E:\\Web 作品\\zxxy-indexhtml css javascript 暑假写的某产品首页(Landing Page)，其实最多只有 1w 行 123456789101112131415---------- Result ------------ Physical : 60255 Source : 52030 Comment : 4384 Single-line comment : 1870 Block comment : 2514 Mixed : 207 Empty block comment : 22 Empty : 4070 To Do : 11Number of files read : 136---------------------------- E:\\Web 作品\\江苏省气候中心-indexhtml css javascript 通宵一天帮一位 16 级学长写过的一个小 demo，很粗糙 123456789101112131415---------- Result ------------ Physical : 995 Source : 652 Comment : 233 Single-line comment : 0 Block comment : 233 Mixed : 30 Empty block comment : 6 Empty : 146 To Do : 0Number of files read : 4---------------------------- E:\\Web 作品\\Duohuo-libraryhtml css javascript 已经退出的某社团当时想要玻璃房，于是俺就写了个作品 用了 IOS11 App Store 的设计，卡片式布局，比较满意的作品 当初熬夜了几天，好像也通宵了 1 天来着，记不得了 123456789101112131415---------- Result ------------ Physical : 28394 Source : 23273 Comment : 1954 Single-line comment : 433 Block comment : 1521 Mixed : 154 Empty block comment : 2 Empty : 3323 To Do : 4Number of files read : 16---------------------------- D:\\部署在线上的网站\\LunTrans-Docshtml css javascript 一个被图书馆老师咕咕咕（其实我也懒得写）的网站的前端 写了一点点就没有再动了 感谢另一位学长~不好意思 qwq 1234567891011121314151617PS D:\\部署在线上的网站\\LunTrans-Docs&gt; sloc ./---------- Result ------------ Physical : 1778 Source : 1452 Comment : 114 Single-line comment : 88 Block comment : 26 Mixed : 18 Empty block comment : 0 Empty : 230 To Do : 4Number of files read : 16---------------------------- D:\\NodeJs\\1111prizejavascript 双十一抽奖抽了个 AD 钙给 √√ 123456789101112131415---------- Result ------------ Physical : 14 Source : 14 Comment : 0 Single-line comment : 0 Block comment : 0 Mixed : 0 Empty block comment : 0 Empty : 0 To Do : 0Number of files read : 1---------------------------- E:\\Web 作品\\抽奖程序html javascript 现场给消防队写的抽奖程序 其实就是拿 bootstrap 写的一个单页 1234567891011121314151617PS E:\\Web作品\\抽奖程序&gt; sloc ./---------- Result ------------ Physical : 83 Source : 68 Comment : 8 Single-line comment : 1 Block comment : 7 Mixed : 2 Empty block comment : 0 Empty : 9 To Do : 0Number of files read : 3---------------------------- C:\\Users\\gylid\\IdeaProjects\\使用 JavaFX 的 Hotel 项目java fxml 第一枚课设，用了很多心思，看了几个 YouTube 视频，翻了一堆 Stack Overflow 国内教程实在太少了，用 JavaFX 的人就够少了，就更别说这款 UI 框架了 就当是菜鸡当一回先驱者吧（掉包小子妄称先驱者），有待开源~ 1234567891011121314151617PS C:\\Users\\gylid\\IdeaProjects\\使用JavaFX的Hotel项目&gt; sloc ./---------- Result ------------ Physical : 3317 Source : 2783 Comment : 311 Single-line comment : 77 Block comment : 234 Mixed : 39 Empty block comment : 0 Empty : 262 To Do : 3Number of files read : 31---------------------------- E:\\Web 作品\\nuistodaywxml wxss javascript 学微信小程序的时候练手的小作品，代码最多也就 1w 行 123456789101112131415---------- Result ------------ Physical : 19320 Source : 19145 Comment : 151 Single-line comment : 82 Block comment : 69 Mixed : 14 Empty block comment : 0 Empty : 38 To Do : 0Number of files read : 13---------------------------- D:\\NodeJs\\node-crawler\\codepenCodepen 备份用的爬虫，一口气备份了上万个 pens（包括我 love 过的、fork 过的、还有 collection 中的）的源代码和封面图_small.jpg 有待开源 有待获取每个 pen 的详细 json 信息 123456789101112131415---------- Result ------------ Physical : 249 Source : 154 Comment : 77 Single-line comment : 28 Block comment : 49 Mixed : 14 Empty block comment : 5 Empty : 37 To Do : 4Number of files read : 3---------------------------- 总结（阉割版）前端嘛，网页的话过万行还是非常容易的…… 2018 年是熬夜的一年，经常肝到一两点… 也去过医院查过锁骨（其实是过度劳累+着凉了，但是当时是被吓到了，总觉得脖子被人勒住，那两晚都没睡好觉，） 进步还是非常明显的，笔记现在已经 2315 篇了（搜集文章、汇集文档、总结语法、记录踩坑、博文备份…），一年学到了很多新技术新知识 很多事情啊，就是敢做和不敢做、想做和不想做 的区别 大概就是这样子吧，一个高兴又痛苦的一年 希望 19 年自己自控力能上来，就像很强的行动力一样！！！ 首先要从作息做起…不能昼夜颠倒…早起早睡….(๑•̀ㅂ•́)و✧ 然后就是在校基础课程…… 努力学好吧，新学期新的开始 然后… 我想想啊，我好像空间说说数目、分布 还没有统计，我先去爬一下看看 然后就是设计啊、深度学习啊 希望 19 年能更多接触更多地学习吧，虽然我是铁定了想当前端（大前端那种），但是一些必要的东西还是要学学滴，拿来装逼当然也是再好不过的 其实我是打算 1 号就把 年度总结的网页写完发出来来着，结果还是没写完（而且还有好多没写），等我写完了再放出来的时候估计只能说，“这是我 戊戌年 的年度总结” 了吧（ 至于为什么要写年度总结这个玩意儿，首先是看隔壁群还有 v2ex 一堆大佬写总结 就跟风，然后就是想养成个习惯吧，插入到个人主页里面（这是我第一年想这么干），以史为鉴，记录年年的数据。总之只有好处没有坏处就是了。","link":"/TjdXkc/"},{"title":"从零开始的Hexo博客搭建教程（三）：SEO优化","text":"🍰 本篇着重介绍了 Hexo 博客做 SEO 的一些小技巧，在内容优质程度不变的情况下如何针对搜索引擎展示或主动提交更多内容。 为什么要做SEO？ SEO”Search Engine Optimization”汉译为搜索引擎优化 ,搜索引擎优化是一种利用搜索引擎的搜索规则来提高目前网站在有关搜索引擎内的自然排名的方式，搜索引擎优化是提高网站在搜索引擎结果中排名的战略。 SEO非常耗时间，但“结果”是增加流量和更高的回报，而这需要您长久的悉心耕耘。 我国互联网用户高达12.8亿，这意味着无论您提供什么样的业务，您的目标受众都可能会在搜索引擎上搜索类似的产品或服务，如果你想吸引他们到你的网站，你需要搜索引擎优化。 它涉及确定目标受众在寻找像您这样的产品或服务时使用哪些关键词和短语，然后努力为这些搜索排名。您需要找到最有潜力和最少竞争的5或10个关键词。这些通用术语的流量通常非常高，并且可能会将网站变成一个流量生成的强国。 搜索流量质量高：主动搜索的用户基本上都是有相关需求的，这些流量留存率高，转化率高，是非常优质的流量来源 性价比高：相对于其他宣传方式，付出的成本低很多 可扩展性：网站可以不停的增加关键词及相关流量 长期有效： 一旦排名提上去，有效期较长 网站标题优化SEO 最重要的是你的标题，一般搜索都是搜索你的标题。 更改 index.swig 文件(your-hexo-site\\themes\\next\\layout); 将下面这段代码： 1{% block title %} {{ config.title }} {% endblock %} 改成： 1{% block title %} {{ config.title }} - {{ theme.description }} {% endblock %} 这时候你的首页会更符合网站名称 - 网站描述这习惯。 进阶，做了 seo 优化，把关键词也显示在 title 标题里，可改成： 1{% block title %} {{ theme.keywords }} - {{ config.title }}{{ theme.description }} {% endblock %} 注意：别堆砌关键字，整个标题一般不超过 80 个字符，可以通过 chinaz 的 seo 综合查询检查。 生成 sitemap添加 sitemap 的目的是为了告诉搜索引擎你的站点结构。 sitemap 生成插件的安装和配置12$ npm install hexo-generator-sitemap --save$ npm install hexo-generator-baidu-sitemap --save 在站点配置文件中添加 sitemap 的生成路径 1234sitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 现在执行 hexo g 生成以后应该可以访问 sitemap.xml 和 baidusitemap.xml 分别到谷歌和百度的站长工具网站上提交 sitemap 就可以了。如果不主动提交 sitemap，搜索引擎可能无法自己找到 sitemap，即使找到，速度也会很慢。github 好像屏蔽了百度的爬虫，所以即使提交了 sitemap，也可能出现无法爬下来的情况。于是我们需要主动向百度提交链接。 让搜索引擎收录你的站点我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入site:&lt;域名&gt;,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站 百度站长一般选 www.开头一定要注意 github 和 coding 在绑定域名时也要顺便绑定 www 和非 www 百度新站保护经检测，您的站点符合百度新站保护要求，请先填写您网站的备案号，填写完成后您可以使用链接提交工具中的“新站保护”提交方式提交数据，百度将对此部分数据的抓取收录提供优待，为期2个月；备案信息可在站点属性工具中查看及修改。 Google Search Console添加资源 将该文件上传至 hexo 博客文件夹的 source/ 目录后部署即可。 打开 菜单 - 站点地图 提交 sitemap.xml 即可。 向百度主动提交链接百度站长获取 token安装 hexo-baidu-url-submit 插件1npm install hexo-baidu-url-submit --save 然后，同样在根目录下，把以下内容配置到_config.yml文件中: 12345baidu_url_submit: count: 1 ## 提交最新的一个链接 host: www.nuist.today ## 在百度站长平台中注册的域名 token: your_token ## 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里! path: baidu_urls.txt ## 文本文档的地址， 新链接会保存在此文本文档里 其次，记得查看 _config.yml 文件中 url 的值， 必须包含是百度站长平台注册的域名（一般有 www）， 比如: 1234# URLurl: https://www.nuist.todayroot: /permalink: post/:title/ 最后，加入新的 deployer: 12deploy: - type: baidu_url_submitter 执行hexo deploy 的时候，新的连接就会被推送了。 robots.txt 文件在 your-hexo-site\\source 中新建 robots.txt，告诉搜索引擎，哪些是可以爬的，哪些是不可以爬的，格式如下： 123456789101112131415161718#hexo robots.txtUser-agent: *Allow: /Allow: /archives/Allow: /categories/Allow: /tags/Disallow: /vendors/Disallow: /js/Disallow: /css/Disallow: /fonts/Disallow: /vendors/Disallow: /fancybox/Sitemap: https://hjptriplebee.github.io/search.xmlSitemap: https://hjptriplebee.github.io/sitemap.xmlSitemap: https://hjptriplebee.github.io/baidusitemap.xml 外链 nofollow 给非友情链接的出站链接添加 “nofollow” 标签，nofollow 标签是由谷歌领头创新的一个“反垃圾链接”的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。 修改模板网站中的 href 出站链接最好添加 nofollow 标签，如： 123{{ __(&apos;footer.powered&apos;, &apos;&lt;a class=&quot;theme-link&quot; href=&quot;http://hexo.io&quot;&gt;Hexo&lt;/a&gt;&apos; ) }} 改成 123{{ __(&apos;footer.powered&apos;,&apos;&lt;a class=&quot;theme-link&quot; href=&quot;http://hexo.io&quot; rel=&quot;external nofollow&quot;&gt;Hexo&lt;/a&gt;&apos;) }} 这种方式修改貌似只能一个一个修改，有点麻烦，只修改了几处地方，或许有空可以研究 hexo 和 next 主题代码看如何进一步优化。 使用 hexo-nofollow 插件为什么没有使用 hexo-autonofollow 插件呢 原理：使用 cheerio 修改文章中每一个 &lt;a&gt;标签 的属性。 安装 1$ npm install hexo-nofollow --save To enable this plugin, insert the following to _config.yml: 12nofollow: enable: true Options 123456nofollow: enable: true exclude: - exclude1.com - exclude2.comexternal_link: true enable - Enable the plugin. Defaults to false. exclude - Exclude hostname. external_link - Add target=&quot;_blank&quot;. Defaults to true. *Note:* external_link setting is already in the default _config.yml. Only add it if you can’t find it. 文章 url 唯一且永久化HEXO 默认的文章链接形式为domain/year/month/day/postname，默认就是一个四级 url，并且可能造成 url 过长，对搜索引擎是十分不友好的，而且一旦文章名字改变，链接也跟着改变。有没有什么方法让地址尽量短小精悍，同时永久化呢？ 使用插件 hexo-abbrlink 可以做到，安装： 1$ npm install hexo-abbrlink --save 至于为什么不用 hexo-uuid，请看 hexo-abbrlink 插件的介绍。 然后 hexo 的根目录配置文件_config.yml 中修改： 1234permalink: p/:abbrlinkabbrlink: alg: crc16 # 算法：crc16(default) and crc32 rep: dec # 进制：dec(default) and hex 这样就确保了博文链接的唯一化，只要不修改 md 文件的 abbrlink 的值，url 就永久不会改变。如此 md 文件名和文件内容也可以随便改了。这样也有利于 SEO 优化。 _另外，在使用过程中我发现了一个 BUG，请注意不要在 hexo server 下直接编辑_post 文件夹中的文章，会导致整个文件直接被覆盖成 addrlink: xx。_ 打个广告（。＾ ▽ ＾） 推荐好朋友 牛牛小可爱写的插件 🎀 hexo-nanoid 本站已经在使用了 文章关键词与描述搜索引擎除了主要抓取标题外，页面的关键词和描述也会抓取。 在\\scaffolds\\post.md 中添加如下代码，用于生成的文章中添加关键字和描述。 12keywords:description: 其他养成良好的md图片书写习惯众所周知 &lt;img alt=&quot;&quot;&gt; 是有利于搜索引擎的，所以在markdown中指定图片时不要漏掉图片标题 ![图片标题](图片链接🔗)。 遵循中文文案排版规范虽然这对SEO并无帮助，但这对于 增强网站气质、降低沟通成本 是必要的。 排版、空白、标点符号 等的正确使用大有章法可循。 这里提供一些参考资料↓ sparanoid/chinese-copywriting-guidelines 中文文案排版指北 ruanyf/document-style-guide 阮一峰的中文技术文档的写作规范","link":"/i5bofg/"},{"title":"总结CSS水平垂直居中的各种骚操作","text":"CSS 是世界上最难的语言! #（手动滑稽）​ ———— 啊哈呵嗨 水平居中 Name Tag margin:0 auto; 基础, 常用 利用 inline-block 基础, 常用 width:fit-content; CSS3 width:fill-available; CSS3 垂直居中 Name Tag padding上下相等 基础, 常用 line-height 基础, 常用 CSS 表(table)布局 👍 常用 “精灵元素”，利用伪类实现 👍 奇技淫巧 水平垂直居中 Name Tag “完全居中法” 👍 基础, 常用 margin 负值法 基础, 常用 translate 负值50%变换 CSS3, 常用 CSS3 flex(弹性)布局 👍 CSS3, 常用 vw vh和translate 👍 CSS3 通过JavaScript代码实现居中 JavaScript 通过隐藏节点+float 利用CSS3 grid(网格)布局 CSS3 object-fit和object-postion居中 奇技淫巧 水平居中margin:0 auto可以说是极为常用了 通过把 固定宽度块级元素 的 margin-left 和 margin-right 设成 auto，就可以使块级元素水平居中。 123456789101112.box { width: 300px; height: 300px; border: 3px solid red; /*text-align: center;*/}img { display: block; width: 100px; height: 100px; margin: 0 auto; //关键的一句话} 123&lt;div class=\"box\"&gt; &lt;img src=\"img1.jpg\" alt=\"这是一张图片\" /&gt;&lt;/div&gt; ⚠️ 注意事项 前提是不受 float 影响 利用 inline-block利用 text-align: center 可以实现在块级元素内部的内联元素水平居中。此方法对 内联元素(inline), 内联块(inline-block), 内联表(inline-table), inline-flex 元素 水平居中都有效。 如果一行中有两个或两个以上的块级元素，可将元素的 display 属性设置为 inline-block，并把父元素的 text-align 属性设置为 center： 123.parent { text-align: center;} 1234567/*多个子元素时*/.container { text-align: center;}.inline-block { display: inline-block;} width:fit-contentwidth:fit-content 也是应该比较好理解的，“shrink-to-fit”表现，换句话说，和 CSS2.1 中的 float, absolute, inline-block 的尺寸收缩表现是一样的OK，然后，有小伙伴会疑问，既然跟很多 CSS 声明有一样的表现，那为什么还要再弄个新东西呢？就拿水平居中效果举例，首先浮动肯定不行，因为只有左浮动和右浮动；绝对定位压根不占据空间，普通流中根本无法应用，而 inline-block 需要父级使用 text-align:center，而本身可能还需要 text-align:left 略烦。而 width:fit-content 可以没有这些烦恼，因为，width:fit-content 可以实现元素收缩效果的同时，保持原本的元素 block 水平状态，于是，就可以直接使用 margin:auto 实现元素向内自适应同时的居中效果了。 12345678910111213141516.box { background-color: #f0f3f9; padding: 10px; /* 这里左右方向是auto */ margin: 10px auto 20px; overflow: hidden;}.inline-block { display: inline-block;}.fit-content { width: -webkit-fit-content; width: -moz-fit-content; width: fit-content;} 1234567891011&lt;strong&gt;display:inline-block;&lt;/strong&gt;&lt;div class=\"box inline-block\"&gt; &lt;img src=\"mm1.jpg\" /&gt; &lt;p&gt;display:inline-block居中要靠父元素，而width:fit-content直接margin:auto.&lt;/p&gt;&lt;/div&gt;&lt;strong&gt;width: fit-content;&lt;/strong&gt;&lt;div class=\"box fit-content\"&gt; &lt;img src=\"mm1.jpg\" /&gt; &lt;p&gt;display:inline-block居中要靠父元素，而width:fit-content直接margin:auto.&lt;/p&gt;&lt;/div&gt; 解释 “fit-content”是 CSS3 中给“width”属性新加的一个属性值，它配合 margin 可以很轻松实现水平居中的效果 width:fill-availablewidth:fill-available 比较好理解，比方说，我们在页面中扔一个没有其他样式的元素，则，此时，该元素的 width 表现就是 fill-available，自动填满剩余的空间。也就是我们平常所说的盒模型的 margin,border,padding 的尺寸填充。出现 fill-available 关键字值的价值在于，我们可以让元素的 100%自动填充特性不仅仅在 block 水平元素上，其他元素，例如，我们一直认为的包裹收缩的 inline-block 元素上： 1234div { display: inline-block; width: fill-available;} 此时，元素兼具了块状元素的自动填充特性以及内联元素的定位对齐等特性(vertical-align/height/line-height)。于是，（例如）我们就可以直接使用 line-height 让一个块状表现的元素垂直居中 垂直居中padding 上下相等最基础的方法，只需添加等值的 padding-top 和 padding-bottom 就可以实现垂直居中（margin也行） 1234.ct { padding: 40px 0; /*text-align: center;*/} 1234&lt;div class=\"ct\"&gt; &lt;p&gt;这里是文字&lt;/p&gt; &lt;img src=\"img1.jpg\" alt=\"这里是图片\" /&gt;&lt;/div&gt; line-height最简单的一种使 单行内联(inline-)元素（单行文字） 垂直居中的方法 如果因为某些原因我们不能使用 padding 属性来实现垂直居中，而且已知文本不会换行， 那么就可以让 line-height(行高) 和 height(高度) 相等，从而实现垂直居中： 1234#v-box { height: 120px; line-height: 120px;} CSS 表(table)布局 👍总的说来这可能是最好的居中实现方法，因为内容块高度会随着实际内容的高度变化，浏览器对此的兼容性也好。 最大的缺点是需要大量额外的 html 标签，需要 2~3 层元素让最内层的元素居中。 利用表布局的 vertical-align: middle 可以轻松实现子元素的垂直居中 1234567891011.center-table { display: table;}.v-cell { /*让元素渲染为表格单元格*/ display: table-cell; /*设置文本水平居中*/ text-align: center; /*设置文本垂直居中*/ vertical-align: middle;} 解释 CSS 中的确是有 vertical-align 属性，但是它只对(X)HTML 元素中拥有 valign 特性的元素才生效，例如表格元素中 的&lt;td&gt;、&lt;th&gt;、&lt;caption&gt;等，而像&lt;div&gt;、&lt;span&gt;这样的元素是 没有 valign 特性的，因此使用 vertical-align 对它们不起作用 但是在 CSS 中还有一个 display 属性能够模拟&lt;table&gt;，所以我们可以使用这个属性来让 &lt;div&gt; 模拟 &lt;table&gt; 就可以使用 vertical-align 了。注意，display:table 和 display:table-cell 的使用方法，前者必须设置在父元素 上，后者必须设置在子元素上，因此我们要为需要定位的文本再增加一个 &lt;div&gt; 元素 “精灵元素”，:before 和 display:inline-block 👍利用 “精灵元素”(ghost element) 实现垂直居中，即 通过伪类:before 在父容器内增加新元素后在用 display:inline-block，通过 100%高度的处理让文本和伪元素垂直对齐,从而得到想要的效果。 有点 CSS Hack 的骚味 123456789101112.container { text-align: center;}.container:before { content: \"\"; display: inline-block; height: 100%; vertical-align: middle;}.inner { display: inline-block;} 123&lt;div class=\"container\"&gt; &lt;div class=\"inner\"&gt;this is a box fixed in center of screen&lt;br /&gt;The second line&lt;/div&gt;&lt;/div&gt; 解释 这个方案是比较特别一些，不是很好理解。 首先，.container 水平居中没问题。 接着，给.container 伪类:before 设定为 height:100%，这样可以用一个伪元素在.container 获得与父元素等高的空间。 然后用 inline-block 和 vertical-align: middle 改变对齐的基线。 通过:before 之后，.container 内的行级元素的对齐基线就跑到居中的位置，也就实现了垂直居中对齐。 这个时候，如果里面仅一排文字，其实可以不用.inner，但是上面的例子里面有一个，这就不一样了。如果直接把文字放在.container 里面，之前的文字会基于:before 基线，会保持垂直对齐的状态。但是之后的文字会另起一行，这一行将起始于:before 的下一行，所以会在:before 的 100%高度下面，导致被顶出.container。但是如果把文字放在.inner 里面，再让.inner 为 inline-block，就可以使.inner 和:before 处于同一基线，这样就让整个.inner 处于垂直中的状态。 强大的 writing-mode我们应该都是这样的的，传统的 web 流中，margin 设置 auto 值的时候，只有水平方向才会居中，因为默认 width 是 100%自适应的，auto 才有计算值可依，而垂直方向，height 没有任何设置的时候高度绝不会自动和父级高度一致，因此，auto 没有计算空间，于是无法实现垂直居中。但是，在 writing-mode 的世界里，纵横规则已经改变，元素的行为表现发生了翻天覆地的变化。 1234567891011121314151617.box { width: 400px; height: 300px; background-color: #f0f3f9; overflow: hidden;}.auto { display: block; margin-top: auto; margin-bottom: auto;}.verticle-mode { writing-mode: tb-rl; -webkit-writing-mode: vertical-rl; writing-mode: vertical-rl;} 123456789&lt;p&gt;&lt;strong&gt;默认流-margin-top:auto;margin-bottom:auto不居中&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"box\"&gt; &lt;div class=\"auto\"&gt;div块状元素&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;垂直流-margin-top:auto;margin-bottom:auto垂直居中&lt;/strong&gt;&lt;/p&gt;&lt;div class=\"box verticle-mode\"&gt; &lt;div class=\"auto\"&gt;div块状元素&lt;/div&gt;&lt;/div&gt; 具有如下优点的水平垂直居中效果： 上下左右居中 纯 css 实现 无定位 居中元素不需要设置宽高 适应性超强 兼容 ie8 demo 地址为：https://liyongleihf2006.github.io/center-box/ 水平垂直居中“完全居中法” 👍绝对定位 + 0 + margin:auto 组合使用，简单粗暴 当我们要制作一个 modal dialog 弹出框时，比如弹出居中于屏幕的广告或登录框。这个时候可以考虑一些相对于窗口或网页居中的方案。 1234567891011/*.center-container { position: relative;}*/.absolute-center { position: absolute; /*或者fixed，记得要设置z-index*/ top: 0; right: 0; bottom: 0; left: 0; margin: auto;} margin 负值法适用于 固定宽高的块级元素 这或许是当前最流行的使用方法。如果块元素尺寸已知，可以通过以下方式让内容块居中于容器显示： 外边距 margin 取负数，大小为 width/height（不使用 box-sizing: border-box 时还包括 padding）的一半，再加上 top: 50%; left: 50%; 1234567891011121314/*.parent { position: relative;}*/.child { top: 50%; width: 100px; height: 100px; margin-top: -50px; /* margin-top值为自身高度的一半 */ margin-left: -50px; position: absolute; padding: 0;} position:absolute、50%和 translate 👍利用 CSS3 translate 的 2D 变换，在水平和垂直两个方向都向反向平移宽高的一半，从而使元素 水平垂直居中。 若只是水平居中，请使用 translateX(-50%) 若只是垂直居中，请使用 translateY(-50%) 12345678910.ele { /*设置元素绝对定位*/ position: absolute; /*top 50%*/ top: 50%; /*left 50%*/ left: 50%; /*css3 transform 实现*/ transform: translate(-50%, -50%);} CSS3 flex(弹性)布局 👍多个块状元素解决方案，简单粗暴 只需把待处理的块状元素的父元素添加属性 display:flex 及 justify-content:center 即可: 12345678910.flex-center { /*弹性盒模型*/ display: flex; /*垂直方向排布*/ /*flex-direction: column;*/ /*主轴居中对齐*/ justify-content: center; /*侧轴居中对齐*/ align-items: center;} 解释 简单解释一下，当 display:flex 时，表示该容器内部的元素将按照 flex 进行布局。 其中 justify-content 用于设置或检索弹性盒子元素在主轴（横轴）方向上的对齐方式；而 align-items 属性定义 flex 子项在 flex 容器的当前行的侧轴（纵轴）方向上的对齐方式。 对.container 赋予了这些样式之后，作为它的内部元素.inner 自己自觉的居中了。而且这里你会发现，由于没有使用 text-align:center，.inner 里面的文字是不会居中的，也就是说仅仅.inner 这个容器居中而已。 ⚠️ 注意事项 Flexbox 是 CSS3 新增属性，设计初衷是为了解决像垂直居中这样的常见布局问题。 记住 Flexbox 不只是用于居中，也可以分栏或者解决一些令人抓狂的布局问题。 但是会存在浏览器的兼容问题。 vw vh 和 translate 👍vh 和 vw 是 CSS3 新增的单位，是指“viewport 的 height 和 width 的 1%” 比如说 50vh 就是当前视口（窗口的高度，实验中包含了滚动条）高度的 50%。也就是说 vw 将获得和 1%差不多的 window 宽度。因此用在 fixed 的时候更加适合。 123456.inner { position: fixed; top: 50vh; left: 50vw; transform: translate(-50%, -50%);} 123&lt;div class=\"inner\"&gt; this is a box fixed in center of screen&lt;/div&gt; 其实和使用 50%没有太大的差别，因为这时 top、left 取的 50%是相对于父元素的，和 margin、padding 不一样。如果非得要 margin 的话，就可以从这里衍生出变体： 1234567.inner2 { position: fixed; top: 0; left: 0; margin: 50vh 0 0 50vw; transform: translate(-50%, -50%);} vh vw 只能从窗口的大小去考虑，不适合正常的文本流。不过有的时候可以非常有用，特别是在做全屏应用的时候，比如 full page。 通过 JavaScript 代码实现居中原生 js 实现 123456div { padding: 50px; display: inline-block; background-color: pink; position: absolute;} 12345window.onload = function() { var div = document.querySelector(\"div\"); // 获取元素 div.style.left = (window.innerWidth - div.offsetWidth) / 2 + \"px\"; // 设置left div.style.top = (window.innerHeight - div.offsetHeight) / 2 + \"px\"; // 设置top}; jQuery 实现水平和垂直居中 jQuery 实现水平和垂直居中的原理就是通过 jQuery 设置 DIV 的 CSS，获取 DIV 的左、上的边距偏移量，边距偏移量的算法就是用页面窗口的宽度减去该 DIV 得宽度，得到的值再除以 2 即左偏移量，右偏移量算法相同。注意 DIV 的 CSS 设置要在 resize() 方法中完成，就是每次改变窗口大小时，都要执行设置 DIV 的 CSS，代码如下： 1234567$(window).resize(function() { $(\".mydiv\").css({ position: \"absolute\", left: ($(window).width() - $(\".mydiv\").outerWidth()) / 2, top: ($(window).height() - $(\".mydiv\").outerHeight()) / 2 });}); 此外在页面载入时，就需要调用 resize()。 123$(function() { $(window).resize();}); 此方法的好处就是不需要知道 DIV 的具体宽度和高度大小，直接用 jQuery 就可以实现水平和垂直居中，而且兼容各浏览器，这个方法在很多的弹出层效果中应用。 通过隐藏节点+float我们可以通过增加一个隐藏节点，然后使其float:left，这样子元素就会被隐藏节点推着水平居中。 这种增加隐藏节点方法也适用于 CSS 垂直居中，原理一样，但是不用 float。 利用 CSS3 grid(网格)布局利用 grid 实现水平垂直居中，CSS3 的最新技术，但兼容性较差，生产环境中不推荐。 12345678.parent { height: 140px; display: grid;}.child { margin: auto;} object-fit 和 object-postion 居中object-fit 只能用于可替换元素(replaced element) ，用以 指定替换元素的内容应该如何适应到其使用的高度和宽度确定的框。 一般用做图片的样式。它有着类似 background-image 的用法： 1234.center { object-fit: fill|cover|contain|none|scale-down; /*其属性值，分别是填充（默认）、包含、覆盖（可能被裁剪）、无变化（保持原状）和等比例缩放*/} 而 object-positon 属性默认值是50% 50%，也就是居中(也就是要求居中的情况不用写这个属性了……），对元素定位控制，类似 background-postion。 空标签无形中添加了空标签，所以不建议使用 1234567891011121314151617181920.wrap { width: 400px; height: 400px; background: #fcf; /*行高等于高度,垂直居中*/ line-height: 400px; /*水平居中*/ text-align: center;}.wrap img { /* 图片按道理需要设置display：block，在这边条件的限制，所以我们没有设置了 */ /* display: block; */ width: 200px; height: 200px; /*垂直居中*/ vertical-align: middle;}.wrap span { display: inline-block;} 1234&lt;div class=\"wrap\"&gt; &lt;img src=\"Koala.jpg\" alt=\"\" title=\"\" /&gt; &lt;span&gt;&lt;/span&gt;&lt;/div&gt; 注意：添加了 span 标签，并且设置 display 属性设置为 inline-block 来使我们 span 标签拥有”layout”，这样就解决了在 IE6 不能兼容的问题. 123456789101112131415161718192021html,body { height: 100%;}.box { position: relative; /*清除浮动*/ clear: both; height: 300px; width: 300px; margin: 0 auto; background: #999;}.floater { float: left; /*相对于父元素高度的50%*/ height: 50%; /*居中元素高度的一半*/ margin-bottom: -150px; background: #fcf;} 网易 NEC 方法1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;div class=\"floater\"&gt;&lt;/div&gt;&lt;div class=\"box\"&gt; 独行冰海、梦幻雪冰&lt;/div&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;HTML5Course - HTML5学堂&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"reset.css\" /&gt; &lt;script type=\"text/javascript\" src=\"jquery-1.8.3.min.js\"&gt;&lt;/script&gt; &lt;style&gt; html, body { width: 100%; height: 100%; } .wrap { position: relative; width: 100%; height: 100%; } .wrap &gt; div { /*父级设置定位*/ position: absolute; left: 50%; top: 50%; } .wrap img { /*设置图片大小*/ display: block; width: 200px; height: 200px; } .wrap img:nth-child(1) { /*第一张图片隐藏*/ visibility: hidden; } .wrap img:nth-child(2) { /*第二张图片定位*/ position: absolute; left: -50%; top: -50%; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div&gt; &lt;img src=\"https://mmbiz.qlogo.cn/mmbiz/p6DwiaCENIB6pR8GhsfVeo7382t1SicdA8iahVpBPSRMaFPaHHLXuyXvkryL43R4GuLMOrhVvDFwwfprmH9f9EgVg/0?wx_fmt=jpeg\" alt=\"HTML5学堂\" /&gt; &lt;img src=\"https://mmbiz.qlogo.cn/mmbiz/p6DwiaCENIB6pR8GhsfVeo7382t1SicdA8iahVpBPSRMaFPaHHLXuyXvkryL43R4GuLMOrhVvDFwwfprmH9f9EgVg/0?wx_fmt=jpeg\" alt=\"HTML5学堂\" /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 效果分析 它的父级 div 设置 left、top 各自为 50%，这一步相信大家还是可以理解，就不详细做介绍了。 那么为什么要用两张图片？ 大家仔细看看，该方法是没有给父级设置宽高，是靠图片来撑开，所以有一张图片是撑开父级的宽高。 另外一张图片设置 left、top 为 50%，意思就是相对它的父级定位，left、top 都是父级宽高的一半（父级的宽高等于图片的宽高） 效果原理分析 这种方法的优势 优点是可以不知道图片的大小，随便放张尺寸上去都能做到居中。另外，兼容性好，如果是不使用 nth-child 选择器的话，IE6 都能兼容的 calc()居中12345678910111213141516171819202122232425262728293031323334&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;HTML5Course - HTML5学堂 - 利用CSS3的calc( )实现水平垂直居中&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"reset.css\" /&gt; &lt;style&gt; .wrap { width: 400px; height: 400px; background-color: #ccc; } .wrap .con { /*利用CSS3的calc() ，它的用法类似于函数，能够给元素设置动态的值：*/ /*（父级的宽度 - 自身的宽度）的一半当做padding的值*/ padding: -webkit-calc((100% - 100px) / 2); padding: -moz-calc((100% - 100px) / 2); padding: -ms-calc((100% - 100px) / 2); padding: calc((100% - 100px) / 2); width: 100px; height: 100px; background-color: pink; color: #fff; /*背景只显示内容区域*/ background-clip: content-box; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"wrap\"&gt; &lt;div class=\"con\"&gt;HTML5学堂 - 刘国利、陈能堡&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; calc()属于 CSS3，用于动态计算长度值，可以用在任何一个需要的地方。有了 calc()，你可以通过计算来决定一个对象的大小和形状。还可以在一个 calc()内部嵌套另一个 calc()。妈妈再也不担心我水平垂直居中不了了。","link":"/yMZpWN/"}],"tags":[{"name":"教程","slug":"教程","link":"/tags/教程/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"博客","slug":"博客","link":"/tags/博客/"},{"name":"图床","slug":"图床","link":"/tags/图床/"},{"name":"推荐","slug":"推荐","link":"/tags/推荐/"},{"name":"awesome","slug":"awesome","link":"/tags/awesome/"},{"name":"坑","slug":"坑","link":"/tags/坑/"},{"name":"年度总结","slug":"年度总结","link":"/tags/年度总结/"},{"name":"SEO","slug":"SEO","link":"/tags/SEO/"},{"name":"代码片段","slug":"代码片段","link":"/tags/代码片段/"}],"categories":[{"name":"技术宅","slug":"技术宅","link":"/categories/技术宅/"},{"name":"生活","slug":"生活","link":"/categories/生活/"},{"name":"年度总结","slug":"生活/年度总结","link":"/categories/生活/年度总结/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"CSS","slug":"前端/CSS","link":"/categories/前端/CSS/"}]}